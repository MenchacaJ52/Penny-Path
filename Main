import time

class WageAccount:
    def __init__(self):
        self.balance = 0

    def deposit_wage(self, amount):
        self.balance += amount
        print(amount, "has been deposited into the Wage Account.")
        print("Current wage account balance: ", self.balance)

    def withdraw_wage(self, amount, savings_account):
        if amount > self.balance:
            print("\033[31mInsufficient funds in wage account\033[0m")
        else:
            self.balance -= amount
            savings_account.balance += amount
            print(amount, "has been transfered to Savings Account")
            print("\033[32Remaining Wage Balance:\033[0m ", self.balance)




class Wages:
    def __init__(self):
        self.weekly_wage = 0


    def set_wage(self):
        print("\033[32mSet Weekly Wage\033[0m")
        print("---------------")
        self.weekly_wage = float(input("Set Weekly Wage: "))
        print("\033[32mWeekly wage as been set to:\033[0m", self.weekly_wage)


    def deposit_wage(self, wage_account, weeks=1):
        for week in range(1, weeks +1):
            wage_account.deposit_wage(self.weekly_wage)


    def wage_menu(self,wage_account, savings_account):

        while True:
            print("\033[32mWages Menu\033[0m")
            print("----------")
            print("1. Set Weekly Wage")
            print("2. Deposit to Wage Account")
            print("3. Transfer Wages to Savings")
            print("0. Exit")
            option = input("Choose an option: ")

            if option =="1":
                self.set_wage()

            elif option =="2":
                if self.weekly_wage <=0:
                    print("\033[31mPlease set weekly wage before depositing.\033[0m")
                else:
                    weeks=int(input("Enter number of weeks to deposit wages: "))
                    if weeks > 0:
                        self.deposit_wage(wage_account, weeks)
                    else:
                        print("\033[31mNumber of weeks must be greater than zero.\033[0m")
            elif option =="3":
                transfer_amount = float(input("Enter amount to transfer to savings: "))
                wage_account.withdraw_wage(transfer_amount, savings_account)

            elif option =="0":
                print("Exiting Wages Menu.")
                break
            else:
                print("\033[31mInvalid option\033[0m")

                self.simulate_wages(savings_account, weeks)







class Needs:
    def __init__(self):
        self.name = input("What is the name of the Expense")
        self.ammt = float(input("How much is the expense"))
        self.freq = input("How often is the charge?(Monthly, Weekly,or Biweekly, or One Time")
        self.frm = ""

    def monthly_amount(self):
        if self.freq.lower() == "monthly":
            return self.ammt
        elif self.freq.lower() == "weekly":
            return self.ammt * 4
        elif self.freq.lower() == "biweekly":
            return self.ammt * 2
        elif self.freq.lower() == "one time":
            return self.ammt
        else:
            print("\033[31mInvalid frequency. Assuming monthly.\033[0m")
            return self.ammt

    def view_expense(self):
        print("Necessary")
        print("Name:",self.name)
        print("Amount: $",self.ammt)
        print("Frequency:",self.freq)
        print("Monthly Equivalent: $", self.monthly_amount())

class Wants:
    def __init__(self):
        self.name = input("What is the name of the Expense")
        self.ammt = float(input("How much is the expense"))
        self.freq = input("How often is the charge?(Monthly, Weekly,or Biweekly, or One Time")
        self.frm = ""

    def monthly_amount(self):
        if self.freq.lower() == "monthly":
            return self.ammt
        elif self.freq.lower() == "weekly":
            return self.ammt * 4
        elif self.freq.lower() == "biweekly":
            return self.ammt * 2
        elif self.freq.lower() == "one time":
            return self.ammt
        else:
            print("\033[31mInvalid frequency. Assuming monthly.\033[0m")
            return self.ammt

    def view_expense(self):
        print("Non-Necessary")
        print("Name:",self.name)
        print("Amount: $",self.ammt)
        print("Frequency:",self.freq)
        print("Monthly Equivalent: $", self.monthly_amount())

class Affordability:
    def __init__(self):
        self.max_allowable_payment = ""
        self.monthly_payment = ""
        self.inc = ""
        self.ammt = ""
        self.yint = ""
        self.mnth = ""
        self.intrt = ""

    def check_affordability(self):
        self.inc = int(input("What is your income?"))
        self.ammt = int(input("how much money is the item"))
        self.yint = int(input("What is the annual interest rate?"))
        self.mnth = int(input("How many Months is the loan?"))
        self.intrt = self.yint / 100 / 12
        if self.intrt > 0:
            self.monthly_payment = self.ammt * (self.intrt * (1 + self.intrt) ** self.mnth) / (
                    (1 + self.intrt) ** self.mnth - 1)
        else:
            self.monthly_payment = self.ammt / self.mnth
        self.max_allowable_payment = self.inc * .36
        if self.monthly_payment <= self.max_allowable_payment:
            print(f"\033[32mYou can afford the loan. Your monthly payment will be ${self.monthly_payment:.2f}.\033[0m")
        else:
            print(
                f"\033[31mYou cannot afford the loan. Your monthly payment would be ${self.monthly_payment:.2f}, but the maximum allowable payment is ${self.max_allowable_payment:.2f}.\033[0m")

class Budget:
    def __init__(self, checking_balance):
        self.bd =0
    def add_budget(self):
        self.bd = int(input("Enter Wants Budget"))
    def display_budget(self):
        print("Current wants budget: ", self.bd)
    def modify(self, checking_balance):
        new_budget = int(input("Enter new budget: "))
        while new_budget > checking_balance:
            print("New budget cannot exceed checking balance.")
            new_budget = int(input("Enter new budget: "))
        self.bd = new_budget



def view_totals(necessary_total, nonnecessary_total, checking_account):
    total_expenses = necessary_total + nonnecessary_total
    remaining_balance = checking_account.balance - total_expenses
    checking_account.balance = remaining_balance

    print("\033[32m--- Expense Totals ---\033[0m")
    print(f"Total Necessary Expenses: ${necessary_total:.2f}")
    print(f"Total Non-Necessary Expenses: ${nonnecessary_total:.2f}")
    print(f"Overall Monthly Expenses: ${total_expenses:.2f}")
    print(f"Remaining Checking Balance: ${checking_account.balance:.2f}")
    if remaining_balance < 0:
        print("\033[31mWarning: Your expenses exceed your checking balance\033[0m")
    else:
        print("\033[32mYou are within your budget.\033[0m")


class Account:
    def __init__(self, balance=0):
        self.balance = balance

    def add_balance(self, amount):
        amount = float(input("Add to your account: "))
        self.balance += amount
        print("__________________________")
        print("\033[32mNew Account Balance:\033[0m ", self.balance)
        print("__________________________")

    def deduct_balance(self, amount):
        if amount > self.balance:
            print("__________________________")
            print("\033[31mInsufficient account fund\033[0m")
            print("__________________________")

        else:
            self.balance -= amount
            print("__________________________")
            print("\033[32mNew savings balance:\033[0m", self.balance)
            print("__________________________")

    def transfer(self, amount, target_account):
        if amount > self.balance:
            print("\033[31mInsufficient funds for transfer\033[0m")
        else:
            self.balance -= amount
            target_account.balance += amount
            print("-------------------")
            print("Transfer Successful")
            print("-------------------")


class SavingsAccount(Account):
    def __init__(self, balance=0):
        super().__init__(balance)

    def remove_savings(self):
            print("Savings Balance rest to $0.00")
            self.balance = 0
    def add_savings(self, amount):
        self.balance += amount


    def savings_menu(self, checking_account):
        while True:
            print("\033[32mSAVINGS MENU\033[0m")
            print("Current Savings: ", self.balance)
            print("1. Add Savings")
            print("2. Remove Savings")
            print("3. Deduct")
            print("4. Transfer")
            print("5. Exit")

            option = input("Please choose an option: ")

            if option == "1":
                amount = float(input("How much would you like to add: "))
                self.add_savings(amount)
            elif option == "2":
                self.remove_savings()
            elif option =="3":
                amount = float(input("How much would you like to deduct: "))
                self.deduct_balance(amount)
            elif option =="4":
                amount = float(input("How much would you like to transfer to checking?: "))
                self.transfer(amount, checking_account)
            elif option == "5":
                break
            else:
                print("\033[31mInvalid option\033[0m")

class CheckingAccount(Account):
    def __init__(self, balance=0):
        super().__init__(balance)

    def remove_chceking(self):
        self.balance = 0
        print("Checking balance reset to $0.00")
    def checking_menu(self, savings_account):

        while True:

            print("\033[32mCHECKING MENU\033[0m")
            print("Current Checking: ", self.balance)
            print("1. Add to Checking")
            print("2. Remove Checking")
            print("3. Deduct")
            print("4. Transfer")
            print("5. Exit")

            option = input("Please choose an option: ")

            if option == "1":
                amount = float(input("Enter amount to add to checking: "))
                self.add_balance(amount)
            elif option == "2":
                self.remove_checking()
            elif option == "3":
                amount = float(input("Enter amount to deduct from checking: "))
                self.deduct_checking()
            elif option == "4":
                amount = float(input("How much would you like to transfer to savings?: "))
                self.transfer(amount, savings_account)
            elif option == "5":
                break
            else:
                print("\033[31mInvalid Option\033[0m")



def main_menu():
   print("\033[32mMAIN MENU\033[0m")
   print("1. Savings")
   print("2. Checking")
   print("3. Affordability")
   print("4. Wage")
   print("5. Tips")
   print("6. Exit")


   option = input("Please choose an option: ")
   return option

def print_delay(text, delay=0.1):
   for letter in text:
       print(letter, end='', flush=True)
       time.sleep(delay)


savings_account = SavingsAccount()
checking_account = CheckingAccount()
wages=Wages()
def general_program():
    expenses = []
    necessary_total = 0
    nonnecessary_total = 0
    checking_account = CheckingAccount()
    checking_balance = checking_account.balance
    b = None
    wage_account = WageAccount()
    wages= Wages()
    balance = 0


    while 1:


        print_delay("\033[32mWelcome to PennyPath\033[0m: ", .1)
        print_delay("Enter 1 to Continue", .0)
        option = input()

        if option =="1":
            while True:
                option = main_menu()

                if option == "1":  # savings menu
                    savings_account.savings_menu(checking_account)

                elif option == "2":
                    checking_account.checking_menu(savings_account)

                elif option == "3":

                    while 1:
                        print("\033[32mAFFORDABILITY MENU\033[0m")
                        print("Choose a Function")
                        print("1. Add Needs Expenses")
                        print("2. Add Wants Expense")
                        print("3. View Expenses")
                        print("4. View Totals")
                        print("5. Affordability")
                        print("6. Set Budget")
                        print("7. Modify Budget")
                        print("8. Exit")
                        num = input("Enter choice: ")

                        if num == "1":
                            e = Needs()
                            expenses.append(e)
                            necessary_total += e.monthly_amount()
                        elif num == "2":
                            ne = Wants()
                            expenses.append(ne)
                            nonnecessary_total += ne.monthly_amount()
                        elif num == "3":
                            for x in expenses:
                                x.view_expense()
                        elif num == "4":
                            view_totals(necessary_total, nonnecessary_total, checking_account)
                            bdleft = b.bd - nonnecessary_total
                            if nonnecessary_total >= b.bd:
                                print("You have spent your monthly budget")
                                print("Please refrain from spending more")
                            elif nonnecessary_total >= b.bd * .9:
                                print("You have spent more than 90% of your budget")
                            print("Budget Left", bdleft)
                        elif num == "5":
                            a = Affordability()
                            a.check_affordability()
                        elif num == "6":
                            b = Budget(checking_balance)
                            b.add_budget()
                            while b.bd > checking_account.balance:
                                print("Budget cannot exceed checking balance")
                                b.bd = int(input("Enter Wants Budget"))
                        elif num == "7":
                            b.modify(checking_account.balance)
                        elif num == "8":
                            break
                        else:
                            print("Invalid choice. Please try again.")
                elif option == "4":
                    wages.wage_menu(wage_account, savings_account)

                elif option == "5":
                    print("Choose a Category")
                    print("1. Saving Money")
                    print("2. Wise Spending")
                    print("3. Avoid Debt")
                    print("4. Invest")
                    print("5. Planning")
                    print("6. Exit")
                    category = input()
                    if category == "1":
                        print("Set Savings Goals: Save a portion of your income regularly, even if it's a small amount,"
                              "to build an emergency fund.")
                        print("Take Advantage of Student Discounts: many stores, restaurants, and services offer "
                              "discounts for students. Use your student ID or check platforms like UNiDAYS or Student "
                              "Beans.")
                    elif category == "2":
                        print(
                            "Avoid Impulse Buying:Wait 24 hours before making non-essential purchases to ensure it's worth it")
                        print(
                            "Cook at Home: Meal prepping and cooking at home are significantly cheaper than dining out or buying ready-made meals.")
                        print(
                            "Buy Used or Rent Textbooks: Use platforms like Chegg, Amazon, or your campus bookstore to buy second-hand or rent textbooks.")
                    elif category == "3":
                        print(
                            "Use Credit Cards Responsibly: If you get a credit card, pay off the balance in full each month to avoid interest and build a good credit score.")
                        print(
                            "Limit Student Loans: Only borrow what you need for essential education-related expenses.")
                    elif category == "4":
                        print(
                            "Start Investing Early: Consider learning about simple investment options like index funds or setting up a Roth IRA if you have earned income")
                        print(
                            "Develop Financial Literacy: Read books, take online courses, or follow credible financial blogs to learn about money management.")
                    elif category == "5":
                        print(
                            "Avoid Last-Minute Expenses: Plan trips, purchases, or projects in advance to save on rush costs")
                        print(
                            "Keep Track of Deadlines: Avoid late fees by keeping track of bill payment and registration deadlines.")


                elif option == "6":
                    break

                else:
                    print("")

general_program()
